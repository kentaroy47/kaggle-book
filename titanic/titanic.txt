
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import numpy as np

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

train

# split train data to features and labels
train_x = train.drop(["Survived"], axis=1)
train_y = train["Survived"]

# copy test as test_x (no survive in test!)
test_x = test.copy()

train_x

# drop id, name, ticket, cabin information
train_x = train_x.drop(["PassengerId", "Name", "Ticket", "Cabin"], axis=1)
test_x = test_x.drop(["PassengerId", "Name", "Ticket", "Cabin"], axis=1)
train_x

# convert sex and embarked to int
# LabelEncoderを使うことで自動的にデータを変換してくれる。ありがたい。


for c in ["Sex", "Embarked"]:
    # how to process NaN
    le = LabelEncoder()
    le.fit(train_x[c].fillna("NA"))
    
    # transform train and test data
    train_x[c] = le.transform(train_x[c].fillna("NA"))
    test_x[c] = le.transform(test_x[c].fillna("NA"))

# monitor transformed data
train_x

test_x

from xgboost import XGBClassifier

# build model
model = XGBClassifier(n_estimators=20, random_state=71)
model.fit(train_x, train_y)

# predict test data
pred = model.predict(test_x)
print(model.predict(test_x))

# binarize prediction
pred_label = np.where(pred > 0.5, 1, 0)
pred_label

submission = pd.DataFrame({"PassengerId": test["PassengerId"], "Survived": pred_label})
submission.to_csv("submission.csv", index=False)

from sklearn.metrics import log_loss, accuracy_score
from sklearn.model_selection import KFold

# save accuracy of each fold
scores_accuracy = []
scores_logloss = []

# cross validation
# split data in 4, and test along.
kf = KFold(6, shuffle=True, random_state=71)
for tr_idx, va_idx in kf.split(train_x):
    # get the split train data
    tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]
    tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]
    
    # train model
    model = XGBClassifier(n_estimators=20, random_state=71)
    model.fit(tr_x, tr_y)
    
    # evaluate model
    va_pred = model.predict(va_x)
    logloss = log_loss(va_y, va_pred)
    accuracy = accuracy_score(va_y, va_pred>0.5)
    
    # save score
    scores_logloss.append(logloss)
    scores_accuracy.append(accuracy)

print("logloss:", np.mean(scores_logloss))
scores_logloss

print("accuracy:", np.mean(scores_accuracy))
scores_accuracy




